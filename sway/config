# Values
set $term kitty
set $browser firefox
set $menu 'rofi -mode run,drun -show drun -sorting-method fzf -matching fuzzy -sort'
set $emoji_menu rofimoji
set $power_menu ~/.local/bin/powermenu
set $wifi_menu  ~/.local/bin/wifimenu
set $bluetooth_menu  ~/.local/bin/bluetooth
set $screenshot_path "~/Pictures/Screenshots"

# Startup
exec swaync
exec wal -R
exec "$HOME/.cargo/bin/swaycons"

# Theme
include "$HOME/.cache/wal/colors-sway"

# client                border      bg          text        indi    childborder
client.focused          $color2     $background $foreground $color7 $color4
client.unfocused        $background $background $foreground $color7 $background

default_border pixel 1
default_floating_border normal
gaps inner 10
focus_follows_mouse no
font pango:FiraCode Nerd Font 10

set $mod Mod4

set $left h
set $down j
set $up k
set $right l

output * bg `find $HOME/.wallpapers/ -type f | shuf -n 1` fill
output eDP-1 pos 1920 320 res 2256x1504 scale 1.25
output DP-1 pos 0 0 res 1920x1080 scale 1

### Input configuration
input "2362:628:PIXA3854:00_093A:0274_Touchpad" {
    tap enabled
    natural_scroll enabled
    click_method clickfinger
}

input "type:keyboard" {
    xkb_options compose:ralt,caps:escape
}

## Lockscreen
bindsym $mod+Shift+Escape exec ~/.local/bin/lockscreen

for_window [class="^.*"] inhibit_idle fullscreen
for_window [app_id="^.*"] inhibit_idle fullscreen

### Idle configuration
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.
set $lock_bg `find $HOME/.wallpapers/ -type f | shuf -n 1`
exec swayidle -w \
         timeout 300 'swaylock --hide-keyboard-layout -f -c 000000 -i $lock_bg' \
         timeout 600 'swaymsg "output * power off"' \
         resume 'swaymsg "output * power on"' \
         after-resume 'swaymsg "output * enable"' \
         before-sleep 'swaylock --hide-keyboard-layout -f -c 000000 -i $lock_bg'

## Key bindings
# Menu's
bindsym $mod+d exec $menu
bindsym $mod+Colon exec $emoji_menu
bindsym $mod+w exec $wifi_menu
bindsym $mod+p exec $power_menu
bindsym $mod+b exec $bluetooth_menu

# Multimedia
bindsym XF86AudioMute exec pactl set-sink-mute @DEFAULT_SINK@ toggle
bindsym XF86AudioRaiseVolume exec pactl set-sink-volume @DEFAULT_SINK@ +5%
bindsym XF86AudioLowerVolume exec pactl set-sink-volume @DEFAULT_SINK@ -5%
bindsym --locked XF86AudioPlay exec playerctl play-pause
bindsym --locked XF86AudioNext exec playerctl next
bindsym --locked XF86AudioPrev exec playerctl previous

# Brightness controls
bindsym --locked XF86MonBrightnessUp exec brightnessctl set +10%
bindsym --locked XF86MonBrightnessDown exec brightnessctl set 10%-

# Start a terminal
bindsym $mod+Return exec $term

# Start a browser
bindsym $mod+Shift+Return exec $browser

# Screenshots
# Take a screenshot with all output and save it into screenshots
bindsym Print exec grim ~/Pictures/Screenshots/$(date +%Y-%m-%d_%H-%m-%s).png | wl-copy

# Take a Screenshot with the region select
bindsym $mod+Print exec grim -g "$(slurp)" ~/Pictures/Screenshots/$(date +%Y-%m-%d_%H-%m-%s).png | wl-copy

# Take a screenshot of the currently focused container
bindsym $mod+Shift+Print exec grim -g "$(swaymsg -t get_tree | jq -j '.. | select(.type?) | select(.focused).rect | "\(.x),\(.y) \(.width)x\(.height)"')" ~/Pictures/Screenshots/$(date +%Y-%m-%d_%H-%m-%s).png | wl-copy


floating_modifier $mod normal
bindsym $mod+Shift+q kill
bindsym $mod+Shift+c reload
bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'

# Move focus
bindsym $mod+$left focus left
bindsym $mod+$down focus down
bindsym $mod+$up focus up
bindsym $mod+$right focus right
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# Move window
bindsym $mod+Shift+$left move left
bindsym $mod+Shift+$down move down
bindsym $mod+Shift+$up move up
bindsym $mod+Shift+$right move right
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# Move workspace to output
bindsym $mod+Control+Shift+$left move workspace to output left
bindsym $mod+Control+Shift+$down move workspace to output down
bindsym $mod+Control+Shift+$up move workspace to output up
bindsym $mod+Control+Shift+$right move workspace to output right
bindsym $mod+Control+Shift+Left move workspace to output left
bindsym $mod+Control+Shift+Down move workspace to output down
bindsym $mod+Control+Shift+Up move workspace to output up
bindsym $mod+Control+Shift+Right move workspace to output right

# Creating new workspaces
bindsym $mod+n exec ~/.cargo/bin/sway-new-workspace open
bindsym $mod+Shift+n exec ~/.cargo/bin/sway-new-workspace move
bindsym $mod+Shift+d exec ~/.cargo/bin/sway-new-workspace open; exec $menu

# Change to workspace
bindsym $mod+1 workspace number 1
bindsym $mod+2 workspace number 2
bindsym $mod+3 workspace number 3
bindsym $mod+4 workspace number 4
bindsym $mod+5 workspace number 5
bindsym $mod+6 workspace number 6
bindsym $mod+7 workspace number 7
bindsym $mod+8 workspace number 8
bindsym $mod+9 workspace number 9
bindsym $mod+0 workspace number 10

# Move window to workspace
bindsym $mod+Shift+1 move container to workspace number 1
bindsym $mod+Shift+2 move container to workspace number 2
bindsym $mod+Shift+3 move container to workspace number 3
bindsym $mod+Shift+4 move container to workspace number 4
bindsym $mod+Shift+5 move container to workspace number 5
bindsym $mod+Shift+6 move container to workspace number 6
bindsym $mod+Shift+7 move container to workspace number 7
bindsym $mod+Shift+8 move container to workspace number 8
bindsym $mod+Shift+9 move container to workspace number 9
bindsym $mod+Shift+0 move container to workspace number 10

bindsym $mod+s layout stacking
bindsym $mod+t layout tabbed
bindsym $mod+e layout toggle split

bindsym $mod+f fullscreen

bindsym $mod+Shift+space floating toggle
bindsym $mod+space focus mode_toggle
bindsym $mod+a focus parent

bindsym $mod+Shift+minus move scratchpad
bindsym $mod+minus scratchpad show

mode "resize" {
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    bindsym Return mode "default"
    bindsym Escape mode "default"
}

bindsym $mod+r mode "resize"

bar {
    swaybar_command waybar
    position top
}

# Floating containers
## Zoom container config
### Default for all windows is non-floating.
### For pop up notification windows that don't use notifications api
for_window [app_id="zoom" title="^zoom$"] border none, floating enable
### For specific Zoom windows
for_window [app_id="zoom" title="^(Zoom|About)$"] border pixel, floating enable
for_window [app_id="zoom" title="Settings"] floating enable, floating_minimum_size 960 x 700
### Open Zoom Meeting windows on a new workspace (a bit hacky)
for_window [app_id="zoom" title="Zoom Meeting(.*)?"] workspace next_on_output --create, move container to workspace current, floating disable, inhibit_idle open

## PulseAudioControl
for_window [app_id="pavucontrol"] border none, floating enable

## Bluetooth Manager
for_window [app_id="blueman-manager"] border none, floating enable

include /etc/sway/config.d/*
